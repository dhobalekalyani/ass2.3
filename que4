# 4. House Price Prediction

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('train.csv')
df.head()

dftest=pd.read_csv('test.csv')
dftest.head()

df.columns

dftest.columns

df.drop_duplicates(inplace=True)
len(df)

dftest.drop_duplicates(inplace=True)

Nan_dict={}
for i in df.columns:
  if df[i].isna().sum()!=0:
    Nan_dict[i]=df[i].isna().sum()
Nan_dict

dtest_Nan_dict={}
for i in dftest.columns:
  if dftest[i].isna().sum()!=0:
    dtest_Nan_dict[i]=dftest[i].isna().sum()
dtest_Nan_dict

df.info()

dftest.info()

df[['BsmtQual',
       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',
       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']][df.BsmtExposure.isna()]

fillna_NA=[
 'Alley',
 'BsmtQual',
 'BsmtCond',
 'BsmtExposure',
 'BsmtFinType1',
 'BsmtFinType2',
 'FireplaceQu',
 'GarageType',
 'GarageFinish',
 'GarageQual',
 'GarageCond',
 'PoolQC',
 'Fence',
 'MiscFeature']

modelist=['MSZoning',
 'Utilities',
 'Exterior1st',
 'Exterior2nd',
 'KitchenQual',
 'Functional',
 'SaleType']

nalist=['GarageCars',
 'GarageArea', 
 'BsmtFinSF1',
 'BsmtFinSF2',
 'BsmtUnfSF',
 'TotalBsmtSF',
 'BsmtFullBath',
 'BsmtHalfBath']

df[['YearBuilt', 'YearRemodAdd','GarageYrBlt']].corr()

df.GarageYrBlt.fillna(df.YearBuilt,inplace=True)
df.LotFrontage.fillna(df.LotFrontage.median(),inplace=True)
df.BsmtExposure[(df.BsmtExposure.isna()) & (df.BsmtCond.notna())].fillna('No',inplace=True)
for i in fillna_NA:
  df[i].fillna('NA',inplace=True)

df.Electrical.fillna(df.Electrical.mode()[0],inplace=True)
df.MasVnrType.fillna('None',inplace=True)
df.MasVnrArea.fillna(0,inplace=True)

for i in modelist:
  dftest[i].fillna(dftest[i].mode()[0],inplace=True)

for i in nalist:
  dftest[i].fillna(0,inplace=True)

dftest.GarageYrBlt.fillna(dftest.YearBuilt,inplace=True)
dftest.LotFrontage.fillna(dftest.LotFrontage.median(),inplace=True)
dftest.BsmtExposure[(dftest.BsmtExposure.isna()) & (dftest.BsmtCond.notna())].fillna('No',inplace=True)
for i in fillna_NA:
  dftest[i].fillna('NA',inplace=True)

dftest.Electrical.fillna(dftest.Electrical.mode()[0],inplace=True)
dftest.MasVnrType.fillna('None',inplace=True)
dftest.MasVnrArea.fillna(0,inplace=True)

df.info()

dftest.info()

objectlist=[]
for i in df.columns:
  if df[i].dtype=='object':
    objectlist.append(i)

objectlist_testset=[]
for i in dftest.columns:
  if dftest[i].dtype=='object':
    objectlist_testset.append(i)

objectlist==objectlist_testset

from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()

for i in objectlist:
  lb.fit(df[i])
  df[i]=lb.transform(df[i])
  dftest[i]=lb.transform(dftest[i])

x=df.drop(['Id', 'MSSubClass','SalePrice'],1)
y=df.SalePrice

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest=train_test_split(x,y, test_size=0.2,random_state=0)

from sklearn.ensemble import RandomForestRegressor
rfg=RandomForestRegressor()

from sklearn.linear_model import LinearRegression
lr=LinearRegression()

rfg.fit(xtrain,ytrain)

rfg.score(xtest,ytest)

lr.fit(xtrain,ytrain)
lr.score(xtest,ytest)

xtest=dftest.drop(['Id', 'MSSubClass',],1)

dftest['SalePrice']=rfg.predict(xtest)

output=dftest[['Id','SalePrice']]
output.to_csv('Output.csv')
